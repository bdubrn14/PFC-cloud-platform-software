> OpenAg-UI@1.0.0 start /Users/rob/openag-cloud-v1/UI-AppEngineFlexVM
> node server.js

PROJECT_ID:openag-cloud-v1
BQ_USER_DATASET:openag_private_webui
BQ_USER_TABLE:user
BQ_DATA_DATASET:test
BQ_VALUE_TABLE:val
open http://localhost:8080
route index
GET / 304 13.604 ms - -
route get login
GET /login 200 8.180 ms - 1283
passport login
findById found user 'rbaynes@mit.edu'
passport login success
passport serialize
POST /login 302 2835.158 ms - 54
passport deserialize
findById found user 'rbaynes@mit.edu'
findById done finding user.
findById EnvVar[0] Sun Jan 21 13:56:26 2018 CCS811_CO2 401.662262
findById EnvVar[1] Sun Jan 21 13:56:24 2018 T6713_CO2 405.955963
findById EnvVar[2] Sat Jan 20 17:43:06 2018 CCS811_CO2 402.178894
findById EnvVar[3] Sat Jan 20 17:43:06 2018 T6713_CO2 401.866943
findById EnvVar[4] Sat Jan 20 17:43:03 2018 CCS811_CO2 403.737183
findById calling callback with valid user.
route isLoggedIn yes, is auth, calling next
route home render home page
GET /home 304 2479.426 ms - -


See in the logs console after I stopped an instance:
Warning: connect.session() MemoryStore is not designed for a production environment, as it will leak memory, and will not scale past a single process.

NOT textPayload:health


I need to use the memcachd instance we get for free?  with a GCP app engine vm.o
- npm module: https://www.npmjs.com/package/connect-memcached
- how to use it: https://gist.github.com/JustinBeckwith/e25983cd50ab21a6b8ad
- GCP doc: https://cloud.google.com/appengine/docs/standard/java/memcache/using
- replace this: https://www.npmjs.com/package/express-session

You automagically get a memcached instance with your app running at memcache:11211, and you can use the standard memcached driver to use it. I put together a quick demo of using express and connect-memcached here:
https://stackoverflow.com/questions/32949613/using-google-memcache-in-nodejs-session



